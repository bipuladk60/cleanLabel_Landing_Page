{"ast":null,"code":"// - node-email Copyright Aaron Heckmann <aaron.heckmann+github@gmail.com> (MIT Licensed)\n\n/**\n * Module dependencies.\n */\n\nvar spawn = require('child_process').spawn;\n\n/**\n * Generates a boundry string.\n * @return {String}\n */\n\nvar boundryidx = 0;\nfunction genBoundry() {\n  return 'part_' + Date.now() + \"_\" + boundryidx++;\n}\n\n/**\n * Email : Sends email using the sendmail command.\n *\n * Note: sendmail must be installed: see http://www.sendmail.org/\n *\n * @param {Object} config - optional configuration object\n *    - to {array|string} Email address(es) to which this msg will be sent\n *    - from {string} Email address from which this msg is sent. If not set\n *      defaults to the `exports.from` global setting.\n *    - replyTo {string} Email address to which replies will be sent. If not\n *      set defaults to `from`\n *    - cc {array|string} Email address(es) who receive a copy\n *    - bcc {array|string} Email address(es) who receive a blind copy\n *    - subject {string} The subject of the email\n *    - body {string} The message of the email\n *    - bodyType {string} Content type of body. Only valid option is\n *      'html' (for now). Defaults to text/plain.\n *    - altText {string} If `bodyType` is set to 'html', this will be sent\n *      as the alternative text.\n *    - timeout {number} Duration in milliseconds to wait before killing the\n *      process. If not set, defaults to `exports.timeout` global setting.\n *    - path {string} Optional path to the sendmail executable.\n *\n * Global settings\n *    - exports.timeout {number} Duration in milliseconds to wait before\n *      killing the process. Defaults to 3000. Used when `timeout` is not set\n *      on a message.\n *    - exports.from {string} Email address from which messages are sent. Used\n *      when `from` was not set on a message.\n *\n * Example:\n *    var Email = require('path/to/email').Email\n *    var myMsg = new Email(\n *    { from: 'me@example.com'\n *    , to:   'you@example.com'\n *    , subject: 'Knock knock...'\n *    , body: \"Who's there?\"\n *    })\n *    myMsg.send(function(err){\n *      ...\n *    })\n */\n\nfunction Email(config) {\n  config = config || {};\n  ;\n  ['to', 'from', 'cc', 'bcc', 'replyTo', 'subject', 'body', 'bodyType', 'altText', 'timeout'].forEach(function (key) {\n    this[key] = config[key];\n  }, this);\n  this.path = config.path || \"sendmail\";\n}\nEmail.prototype = {\n  send: function (callback) {\n    if (!this.valid(callback)) return;\n    var sendmail = spawn(this.path, ['-i', '-t'], this.options);\n    sendmail.on('exit', function (code) {\n      var err = null;\n      if (code !== 0) {\n        err = new Error(\"Sendmail exited with code: \" + code);\n      }\n      if (callback) {\n        callback(err);\n      }\n    });\n    sendmail.stdin.end(this.msg);\n  },\n  get options() {\n    return {\n      timeout: this.timeout || exports.timeout\n    };\n  },\n  get msg() {\n    var msg = new Msg(),\n      boundry = genBoundry(),\n      to = formatAddress(this.to),\n      cc = formatAddress(this.cc),\n      bcc = formatAddress(this.bcc),\n      html = this.bodyType && 'html' === this.bodyType.toLowerCase(),\n      plaintext = !html ? this.body : this.altText ? this.altText : '';\n    msg.line('To: ' + to);\n    msg.line('From: ' + (this.from || exports.from));\n    msg.line('Reply-To: ' + (this.replyTo || this.from || exports.from));\n    msg.line('Subject: ' + this.subject);\n    if (cc) msg.line('CC: ' + cc);\n    if (bcc) msg.line('BCC: ' + bcc);\n    msg.line('Mime-Version: 1.0');\n    msg.line('Content-Type: multipart/alternative; boundary=' + boundry);\n    msg.line();\n    if (plaintext) {\n      msg.line('--' + boundry);\n      msg.line('Content-Type: text/plain; charset=utf-8');\n      msg.line('Content-Disposition: inline');\n      msg.line();\n      msg.line(plaintext);\n      msg.line();\n    }\n    if (html) {\n      msg.line('--' + boundry);\n      msg.line('Content-Type: text/html; charset=utf-8');\n      msg.line('Content-Transfer-Encoding: Base64');\n      msg.line('Content-Disposition: inline');\n      msg.line();\n      msg.line(this.encodedBody);\n      msg.line();\n    }\n    return msg.toString();\n  },\n  get encodedBody() {\n    var encoded = new Buffer(this.body).toString('base64'),\n      len = encoded.length,\n      size = 100,\n      start = 0,\n      ret = '',\n      chunk;\n    while (chunk = encoded.substring(start, start + size > len ? len : start + size)) {\n      ret += chunk + '\\n';\n      start += size;\n    }\n    return ret;\n  },\n  valid: function (callback) {\n    if (!requiredFieldsExist(this, callback)) return false;\n    if (!fieldsAreClean(this, callback)) return false;\n    var validatedHeaders = ['to', 'from', 'cc', 'bcc', 'replyTo'],\n      len = validatedHeaders.length,\n      self = this,\n      addresses,\n      addLen,\n      key;\n    while (len--) {\n      key = validatedHeaders[len];\n      if (self[key]) {\n        addresses = toArray(self[key]);\n        addLen = addresses.length;\n        while (addLen--) {\n          if (!isValidAddress(addresses[addLen])) {\n            return error(\"invalid email address : \" + addresses[addLen], callback);\n          }\n        }\n      }\n    }\n    return true;\n  }\n};\n\n/**\n * Email message constructor.\n *\n * @return {Msg}\n */\n\nfunction Msg() {\n  this.lines = [];\n}\nMsg.prototype = {\n  line: function (text) {\n    this.lines.push(text || '');\n  },\n  toString: function () {\n    return this.lines.join('\\n').replace(/\"/g, '\\\\\"');\n  }\n};\n\n/**\n * Validation helpers.\n */\n\nvar cleanHeaders = ['to', 'from', 'cc', 'bcc', 'replyTo', 'subject'],\n  injectionrgx = new RegExp(cleanHeaders.join(':|') + ':|content\\-type:', 'i');\n\n/**\n * Determines if any email headers contain vulnerabilities.\n *\n * @param {Email} email\n * @param {Function} callback\n * @return {Bool}\n */\n\nfunction fieldsAreClean(email, callback) {\n  var len = cleanHeaders.length,\n    header,\n    vlen,\n    vals,\n    val;\n  while (len--) {\n    header = cleanHeaders[len];\n    if (!email[header]) {\n      continue;\n    }\n    vals = toArray(email[header]);\n    vlen = vals.length;\n    while (vlen--) {\n      val = vals[vlen];\n      if (val) {\n        if (injectionrgx.test(val) || ~val.indexOf(\"%0a\") || ~val.indexOf(\"%0d\")) {\n          return error(\"Header injection detected in [\" + header + \"]\", callback);\n        }\n        vals[vlen] = val.replace(/\\n|\\r/ig, '');\n      }\n    }\n    email[header] = 2 > vals.length ? vals[0] : vals;\n  }\n  return true;\n}\n\n/**\n * Determines if all required email fields exist.\n *\n * @param {Email} email\n * @param {Function} callback\n * @return {Bool}\n */\n\nfunction requiredFieldsExist(email, callback) {\n  if (!email.from && !exports.from) {\n    return error('from is required', callback);\n  }\n  if (!email.to) {\n    return error('to is required', callback);\n  }\n  if (!email.subject) {\n    return error('subject is required', callback);\n  }\n  return true;\n}\n\n/**\n * Error helper that throws if no callback is passed. Else\n * executes the callback passing the err as the first argument.\n *\n * @param {String} msg\n * @param {Function} callback\n * @return {Bool|undefined}\n */\n\nfunction error(msg, callback) {\n  var err = new Error('node-email error: ' + msg);\n  if (callback) {\n    callback(err);\n    return false;\n  }\n  throw err;\n}\n\n/**\n * Formats an array of addresses as a string.\n *\n * @param {Array|String} what\n * @return {String}\n */\n\nfunction formatAddress(what) {\n  return Array.isArray(what) ? what.join(', ') : what;\n}\n\n/**\n * Converts `what` to an array.\n *\n * @param {Mixed} what\n * @return {Array}\n */\n\nfunction toArray(what) {\n  return Array.isArray(what) ? what : [what];\n}\n\n/**\n * Email validation regexps.\n * @see http://fightingforalostcause.net/misc/2006/compare-email-regex.php\n */\n\nvar emailrgx = /^[-a-z0-9~!$%^&*_=+}{\\'?]+(\\.[-a-z0-9~!$%^&*_=+}{\\'?]+)*@([a-z0-9_][-a-z0-9_]*(\\.[-a-z0-9_]+)*\\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-zрф]{2,6})|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,5})?$/i;\nvar capturergx = /<([^>].*)>$/;\n\n/**\n * Determines if `rawAddress` is a valid email address.\n *\n * @param {String} rawAddress\n * @return {Bool}\n */\n\nfunction isValidAddress(rawAddress) {\n  // john smith <email@domain.com> | email@domain.com\n  var address = capturergx.exec(rawAddress);\n  return address && address[1] ? emailrgx.test(address[1]) : emailrgx.test(rawAddress);\n}\n\n/**\n * Exports.\n */\n\nexports.Email = Email;\nexports.version = '0.2.4';\nexports.from = undefined;\nexports.timeout = 3000;\nexports.isValidAddress = isValidAddress;","map":{"version":3,"names":["spawn","require","boundryidx","genBoundry","Date","now","Email","config","forEach","key","path","prototype","send","callback","valid","sendmail","options","on","code","err","Error","stdin","end","msg","timeout","exports","Msg","boundry","to","formatAddress","cc","bcc","html","bodyType","toLowerCase","plaintext","body","altText","line","from","replyTo","subject","encodedBody","toString","encoded","Buffer","len","length","size","start","ret","chunk","substring","requiredFieldsExist","fieldsAreClean","validatedHeaders","self","addresses","addLen","toArray","isValidAddress","error","lines","text","push","join","replace","cleanHeaders","injectionrgx","RegExp","email","header","vlen","vals","val","test","indexOf","what","Array","isArray","emailrgx","capturergx","rawAddress","address","exec","version","undefined"],"sources":["/Users/bipuladhikari/Documents/webprojects/cleanLabelLandingPage/node_modules/email/index.js"],"sourcesContent":["\n// - node-email Copyright Aaron Heckmann <aaron.heckmann+github@gmail.com> (MIT Licensed)\n\n/**\n * Module dependencies.\n */\n\nvar spawn = require('child_process').spawn;\n\n/**\n * Generates a boundry string.\n * @return {String}\n */\n\nvar boundryidx = 0;\nfunction genBoundry () {\n  return 'part_' + Date.now() + \"_\" + boundryidx++;\n}\n\n/**\n * Email : Sends email using the sendmail command.\n *\n * Note: sendmail must be installed: see http://www.sendmail.org/\n *\n * @param {Object} config - optional configuration object\n *    - to {array|string} Email address(es) to which this msg will be sent\n *    - from {string} Email address from which this msg is sent. If not set\n *      defaults to the `exports.from` global setting.\n *    - replyTo {string} Email address to which replies will be sent. If not\n *      set defaults to `from`\n *    - cc {array|string} Email address(es) who receive a copy\n *    - bcc {array|string} Email address(es) who receive a blind copy\n *    - subject {string} The subject of the email\n *    - body {string} The message of the email\n *    - bodyType {string} Content type of body. Only valid option is\n *      'html' (for now). Defaults to text/plain.\n *    - altText {string} If `bodyType` is set to 'html', this will be sent\n *      as the alternative text.\n *    - timeout {number} Duration in milliseconds to wait before killing the\n *      process. If not set, defaults to `exports.timeout` global setting.\n *    - path {string} Optional path to the sendmail executable.\n *\n * Global settings\n *    - exports.timeout {number} Duration in milliseconds to wait before\n *      killing the process. Defaults to 3000. Used when `timeout` is not set\n *      on a message.\n *    - exports.from {string} Email address from which messages are sent. Used\n *      when `from` was not set on a message.\n *\n * Example:\n *    var Email = require('path/to/email').Email\n *    var myMsg = new Email(\n *    { from: 'me@example.com'\n *    , to:   'you@example.com'\n *    , subject: 'Knock knock...'\n *    , body: \"Who's there?\"\n *    })\n *    myMsg.send(function(err){\n *      ...\n *    })\n */\n\nfunction Email (config) {\n  config = config || {};\n\n  ; ['to'\n    ,'from'\n    ,'cc'\n    ,'bcc'\n    ,'replyTo'\n    ,'subject'\n    ,'body'\n    ,'bodyType'\n    ,'altText'\n    ,'timeout' ].forEach(function (key) {\n    this[key] = config[key];\n  }, this);\n\n  this.path = config.path || \"sendmail\";\n}\n\n\nEmail.prototype = {\n\n  send: function (callback) {\n    if (!this.valid(callback)) return;\n    var sendmail = spawn(this.path, ['-i', '-t'], this.options);\n    sendmail.on('exit', function(code) {\n      var err = null;\n      if (code !== 0) {\n        err = new Error(\"Sendmail exited with code: \" + code);\n      }\n\n      if (callback) {\n        callback(err);\n      }\n    });\n\n    sendmail.stdin.end(this.msg);\n  }\n\n, get options () {\n    return { timeout: this.timeout || exports.timeout };\n  }\n\n, get msg () {\n    var msg = new Msg()\n      , boundry = genBoundry()\n      , to = formatAddress(this.to)\n      , cc = formatAddress(this.cc)\n      , bcc = formatAddress(this.bcc)\n      , html = this.bodyType && 'html' === this.bodyType.toLowerCase()\n      , plaintext = !html ? this.body\n          : this.altText  ? this.altText\n          : '';\n\n    msg.line('To: ' + to);\n    msg.line('From: '+ (this.from || exports.from));\n    msg.line('Reply-To: ' + (this.replyTo || this.from || exports.from));\n    msg.line('Subject: '+ this.subject);\n\n    if (cc) msg.line('CC: ' + cc);\n\n    if (bcc) msg.line('BCC: ' + bcc);\n\n    msg.line('Mime-Version: 1.0');\n    msg.line('Content-Type: multipart/alternative; boundary=' + boundry);\n    msg.line();\n\n    if (plaintext) {\n      msg.line('--' + boundry);\n      msg.line('Content-Type: text/plain; charset=utf-8');\n      msg.line('Content-Disposition: inline');\n      msg.line();\n      msg.line(plaintext);\n      msg.line();\n    }\n\n    if (html) {\n      msg.line('--' + boundry);\n      msg.line('Content-Type: text/html; charset=utf-8');\n      msg.line('Content-Transfer-Encoding: Base64');\n      msg.line('Content-Disposition: inline');\n      msg.line();\n      msg.line(this.encodedBody);\n      msg.line();\n    }\n\n    return msg.toString();\n  }\n\n, get encodedBody () {\n    var encoded = (new Buffer(this.body)).toString('base64')\n      , len = encoded.length\n      , size = 100\n      , start = 0\n      , ret = ''\n      , chunk;\n\n    while (chunk = encoded.substring(start, start + size > len ? len : start + size)) {\n      ret += chunk + '\\n';\n      start += size;\n    }\n\n    return ret;\n  }\n\n, valid: function (callback) {\n    if (!requiredFieldsExist(this, callback)) return false;\n    if (!fieldsAreClean(this, callback)) return false;\n\n    var validatedHeaders = ['to','from','cc','bcc','replyTo']\n      , len = validatedHeaders.length\n      , self = this\n      , addresses\n      , addLen\n      , key;\n\n    while (len--) {\n      key = validatedHeaders[len];\n      if (self[key]) {\n        addresses = toArray(self[key]);\n        addLen = addresses.length;\n        while (addLen--) {\n          if (!isValidAddress(addresses[addLen])) {\n            return error(\"invalid email address : \" + addresses[addLen], callback);\n          }\n        }\n      }\n    }\n\n    return true;\n  }\n}\n\n\n/**\n * Email message constructor.\n *\n * @return {Msg}\n */\n\nfunction Msg () {\n  this.lines = [];\n}\n\nMsg.prototype = {\n\n  line: function (text) {\n    this.lines.push(text || '');\n  }\n\n, toString: function () {\n    return this.lines.join('\\n').replace(/\"/g, '\\\\\"');\n  }\n}\n\n/**\n * Validation helpers.\n */\n\nvar cleanHeaders = ['to','from','cc','bcc','replyTo','subject']\n  , injectionrgx = new RegExp(cleanHeaders.join(':|') + ':|content\\-type:', 'i');\n\n/**\n * Determines if any email headers contain vulnerabilities.\n *\n * @param {Email} email\n * @param {Function} callback\n * @return {Bool}\n */\n\nfunction fieldsAreClean (email, callback) {\n  var len = cleanHeaders.length\n    , header\n    , vlen\n    , vals\n    , val;\n\n  while (len--) {\n    header = cleanHeaders[len];\n\n    if (!email[header]) {\n      continue;\n    }\n\n    vals = toArray(email[header]);\n    vlen = vals.length;\n\n    while (vlen--) {\n      val = vals[vlen];\n      if (val) {\n        if (injectionrgx.test(val) || ~val.indexOf(\"%0a\") || ~val.indexOf(\"%0d\")) {\n          return error(\"Header injection detected in [\" + header + \"]\", callback);\n        }\n        vals[vlen] = val.replace(/\\n|\\r/ig, '');\n      }\n    }\n\n    email[header] = 2 > vals.length\n      ? vals[0]\n      : vals;\n  }\n\n  return true;\n}\n\n/**\n * Determines if all required email fields exist.\n *\n * @param {Email} email\n * @param {Function} callback\n * @return {Bool}\n */\n\nfunction requiredFieldsExist (email, callback) {\n  if (!email.from && !exports.from) {\n    return error('from is required', callback);\n  }\n\n  if (!email.to) {\n    return error('to is required', callback);\n  }\n\n  if (!email.subject) {\n    return error('subject is required', callback);\n  }\n\n  return true;\n}\n\n/**\n * Error helper that throws if no callback is passed. Else\n * executes the callback passing the err as the first argument.\n *\n * @param {String} msg\n * @param {Function} callback\n * @return {Bool|undefined}\n */\n\nfunction error (msg, callback) {\n  var err = new Error('node-email error: ' + msg);\n\n  if (callback) {\n    callback(err);\n    return false;\n  }\n\n  throw err;\n}\n\n/**\n * Formats an array of addresses as a string.\n *\n * @param {Array|String} what\n * @return {String}\n */\n\nfunction formatAddress (what) {\n  return Array.isArray(what)\n    ? what.join(', ')\n    : what;\n}\n\n/**\n * Converts `what` to an array.\n *\n * @param {Mixed} what\n * @return {Array}\n */\n\nfunction toArray (what) {\n  return Array.isArray(what)\n    ? what\n    : [what];\n}\n\n/**\n * Email validation regexps.\n * @see http://fightingforalostcause.net/misc/2006/compare-email-regex.php\n */\n\nvar emailrgx = /^[-a-z0-9~!$%^&*_=+}{\\'?]+(\\.[-a-z0-9~!$%^&*_=+}{\\'?]+)*@([a-z0-9_][-a-z0-9_]*(\\.[-a-z0-9_]+)*\\.(aero|arpa|biz|com|coop|edu|gov|info|int|mil|museum|name|net|org|pro|travel|mobi|[a-zрф]{2,6})|([0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}))(:[0-9]{1,5})?$/i;\n\nvar capturergx = /<([^>].*)>$/;\n\n/**\n * Determines if `rawAddress` is a valid email address.\n *\n * @param {String} rawAddress\n * @return {Bool}\n */\n\nfunction isValidAddress (rawAddress) {\n  // john smith <email@domain.com> | email@domain.com\n  var address = capturergx.exec(rawAddress);\n  return address && address[1]\n    ? emailrgx.test(address[1])\n    : emailrgx.test(rawAddress);\n}\n\n/**\n * Exports.\n */\n\nexports.Email = Email;\nexports.version = '0.2.4';\nexports.from = undefined;\nexports.timeout = 3000;\nexports.isValidAddress = isValidAddress;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}